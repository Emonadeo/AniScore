@use 'src/styles/color';

.view-play {
	height: 100%;
	gap: 3rem;
	display: grid;
	place-content: center;

	.progress {
		display: grid;
		grid-template-columns: 1fr;
		grid-auto-rows: max-content;
		gap: 1rem;
	}

	.duel {
		display: grid;
		grid-template-columns: 13.5rem 1.5rem 1.5rem 13.5rem;
		grid-auto-rows: max-content;
		align-items: center;
		gap: 1.5rem 3rem;

		.anime.left {
			grid-row: 1;
			grid-column: 1 / 3;
		}

		.anime.right {
			grid-row: 1;
			grid-column: 3 / 5;
		}

		.tie {
			grid-row: 1;
			grid-column: 2 / 4;
			z-index: 1;
			background-color: rgba(color.$surface, 0.5);
			color: color.$on-surface;
			height: 3rem;
		}

		kbd:first-of-type {
			grid-row: 2;
			grid-column: 1 / 3;
		}

		kbd:nth-of-type(2) {
			grid-row: 2;
			grid-column: 2 / 4;
		}

		kbd:last-of-type {
			grid-row: 2;
			grid-column: 3 / 5;
		}

		.swap-enter-active,
		.swap-exit-active {
			transition: transform 500ms ease;
		}

		.anime.right.swap-enter,
		.anime.right.swap-exit-to {
			transform: translateX(calc(50vw + 6rem)) rotate(30deg);
		}

		.anime.left.swap-enter,
		.anime.left.swap-exit-to {
			transform: translateX(calc(-50vw - 6rem)) rotate(-30deg);
		}

		kbd:first-of-type,
		kbd:last-of-type {
			justify-self: center;
		}
	}
}

@keyframes swap {
	to {
		transform: translateX(calc(50vw + 6rem)) rotate(30deg);
	}
}
